@compiler >= 6
	
include "String.aes"
include "token.aes"

payable main contract Account =
    record state = {
        owner: address,
        schedules: map(address, map(string, map(string, string))),
        contexts: map(address, map(string, string)),
        webhooks: map(address, map(string, string)),
        invoices: map(address, map(string, string))
        }

    stateful entrypoint init() = {
        owner = Call.caller,
        schedules = {},
        contexts ={},
        webhooks = {},
        invoices = {}
        }

    stateful entrypoint spend(token: DamageToken, node_address: address, amount: int, feature_hash: string, report_hash: string) =
        token.transfer(Call.origin, node_address, amount)
		
    stateful entrypoint add_schedule(id: string, feature_hash: string, cronspec: string) =
        let oldmap = Map.lookup_default(Call.caller, state.schedules, {})
        let newmap = oldmap{[id] = {["cron"] = cronspec, ["feature_hash"] = feature_hash}}
        put(state{schedules[Call.caller] = newmap})

    stateful entrypoint delete_schedule(id: string) =
        let oldmap = Map.lookup_default(Call.caller, state.schedules, {})
        let newmap = Map.delete(id, oldmap)
        put(state{schedules[Call.caller] = newmap})

    stateful entrypoint get_schedules(): map(string, map(string, string)) =
        Map.lookup_default(Call.caller, state.schedules, {})

    stateful entrypoint get_all_schedules(): map(address, map(string, map(string, string))) =
        require_owner()
        state.schedules

    stateful entrypoint add_context(name: string, value: string, visibility: string) =
        put(state{contexts[Call.caller][name] = value})

    stateful entrypoint get_context(): map(string, string) =
        Map.lookup_default(Call.caller, state.contexts, {})

    stateful entrypoint add_webhook(name: string, webhook: string) =
        let oldmap = Map.lookup_default(Call.caller, state.webhooks, {})
        let newmap = oldmap{[name] = webhook}
        put(state{webhooks[Call.caller] = newmap})

    stateful entrypoint delete_webhook(name: string) =
        let oldmap = Map.lookup_default(Call.caller, state.webhooks, {})
        let newmap = Map.delete(name, oldmap)
        put(state{webhooks[Call.caller] = newmap})

    stateful entrypoint get_webhooks(): map(string,string) =
        Map.lookup_default(Call.caller, state.webhooks, {})

    function require_owner() =
        require(Call.caller == state.owner, "ONLY_OWNER_CALL_ALLOWED")

    stateful entrypoint pay_invoice(token: DamageToken, rhash: string, amount: int) =
        token.transfer(node_address, amount)
        let oldmap = Map.lookup_default(Call.caller, state.invoices, {})
        let newmap = oldmap{[rhash] = amount}
        put(state{invoices[Call.caller] = newmap})
    

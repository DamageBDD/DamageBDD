@compiler >= 6
	
include "String.aes"

payable contract Account =
    record state = {
        last_invoice_ts: int,
        balance: int,
        schedules: list(string),
        deployer: address
        }

    stateful entrypoint init() = {
        balance = 400000000, // free credits on start
        schedules = [],
        last_invoice_ts = 0,
        deployer = Call.caller
        }

    stateful entrypoint spend(amount: int): state =
        if(state.balance =< 1)
            abort(String.concat("balance too low", Int.to_str(state.balance)))
        else
            put(state{balance = state.balance - amount})
        state
		
    stateful entrypoint update_schedules(jobid: string) =
        put(state{schedules = jobid::state.schedules})

    stateful entrypoint fund(amount: int, timestamp: int): unit =
        if(timestamp < state.last_invoice_ts)
            abort(String.concat("Timestamp older than last invoice paid.", Int.to_str(state.last_invoice_ts)))
        elif(amount > 1)
            put(state{balance = state.balance + amount,
                last_invoice_ts = Chain.timestamp})
        else
            abort(String.concat("Value too low", Int.to_str(amount)))

    stateful entrypoint get_state(): state =
        state
			  

